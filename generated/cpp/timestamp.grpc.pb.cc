// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: timestamp.proto

#include "timestamp.pb.h"
#include "timestamp.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace timestamp {
namespace v1 {

static const char* TimestampService_method_names[] = {
  "/timestamp.v1.TimestampService/GetCurrentTimestamp",
  "/timestamp.v1.TimestampService/StreamTimestamps",
};

std::unique_ptr< TimestampService::Stub> TimestampService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TimestampService::Stub> stub(new TimestampService::Stub(channel, options));
  return stub;
}

TimestampService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetCurrentTimestamp_(TimestampService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamTimestamps_(TimestampService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status TimestampService::Stub::GetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::timestamp::v1::GetCurrentTimestampResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::timestamp::v1::GetCurrentTimestampRequest, ::timestamp::v1::GetCurrentTimestampResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentTimestamp_, context, request, response);
}

void TimestampService::Stub::async::GetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest* request, ::timestamp::v1::GetCurrentTimestampResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::timestamp::v1::GetCurrentTimestampRequest, ::timestamp::v1::GetCurrentTimestampResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentTimestamp_, context, request, response, std::move(f));
}

void TimestampService::Stub::async::GetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest* request, ::timestamp::v1::GetCurrentTimestampResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentTimestamp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::timestamp::v1::GetCurrentTimestampResponse>* TimestampService::Stub::PrepareAsyncGetCurrentTimestampRaw(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::timestamp::v1::GetCurrentTimestampResponse, ::timestamp::v1::GetCurrentTimestampRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentTimestamp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::timestamp::v1::GetCurrentTimestampResponse>* TimestampService::Stub::AsyncGetCurrentTimestampRaw(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentTimestampRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::timestamp::v1::TimestampMessage>* TimestampService::Stub::StreamTimestampsRaw(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::timestamp::v1::TimestampMessage>::Create(channel_.get(), rpcmethod_StreamTimestamps_, context, request);
}

void TimestampService::Stub::async::StreamTimestamps(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest* request, ::grpc::ClientReadReactor< ::timestamp::v1::TimestampMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::timestamp::v1::TimestampMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamTimestamps_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::timestamp::v1::TimestampMessage>* TimestampService::Stub::AsyncStreamTimestampsRaw(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::timestamp::v1::TimestampMessage>::Create(channel_.get(), cq, rpcmethod_StreamTimestamps_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::timestamp::v1::TimestampMessage>* TimestampService::Stub::PrepareAsyncStreamTimestampsRaw(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::timestamp::v1::TimestampMessage>::Create(channel_.get(), cq, rpcmethod_StreamTimestamps_, context, request, false, nullptr);
}

TimestampService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimestampService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimestampService::Service, ::timestamp::v1::GetCurrentTimestampRequest, ::timestamp::v1::GetCurrentTimestampResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimestampService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::timestamp::v1::GetCurrentTimestampRequest* req,
             ::timestamp::v1::GetCurrentTimestampResponse* resp) {
               return service->GetCurrentTimestamp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimestampService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TimestampService::Service, ::timestamp::v1::StreamTimestampsRequest, ::timestamp::v1::TimestampMessage>(
          [](TimestampService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::timestamp::v1::StreamTimestampsRequest* req,
             ::grpc::ServerWriter<::timestamp::v1::TimestampMessage>* writer) {
               return service->StreamTimestamps(ctx, req, writer);
             }, this)));
}

TimestampService::Service::~Service() {
}

::grpc::Status TimestampService::Service::GetCurrentTimestamp(::grpc::ServerContext* context, const ::timestamp::v1::GetCurrentTimestampRequest* request, ::timestamp::v1::GetCurrentTimestampResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimestampService::Service::StreamTimestamps(::grpc::ServerContext* context, const ::timestamp::v1::StreamTimestampsRequest* request, ::grpc::ServerWriter< ::timestamp::v1::TimestampMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace timestamp
}  // namespace v1
#include <grpcpp/ports_undef.inc>

