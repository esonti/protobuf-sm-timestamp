// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: timestamp.proto
#ifndef GRPC_timestamp_2eproto__INCLUDED
#define GRPC_timestamp_2eproto__INCLUDED

#include "timestamp.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace timestamp {
namespace v1 {

// Timestamp service definition
class TimestampService final {
 public:
  static constexpr char const* service_full_name() {
    return "timestamp.v1.TimestampService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get the current timestamp
    virtual ::grpc::Status GetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::timestamp::v1::GetCurrentTimestampResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timestamp::v1::GetCurrentTimestampResponse>> AsyncGetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timestamp::v1::GetCurrentTimestampResponse>>(AsyncGetCurrentTimestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timestamp::v1::GetCurrentTimestampResponse>> PrepareAsyncGetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timestamp::v1::GetCurrentTimestampResponse>>(PrepareAsyncGetCurrentTimestampRaw(context, request, cq));
    }
    // Stream timestamps at regular intervals
    std::unique_ptr< ::grpc::ClientReaderInterface< ::timestamp::v1::TimestampMessage>> StreamTimestamps(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::timestamp::v1::TimestampMessage>>(StreamTimestampsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::timestamp::v1::TimestampMessage>> AsyncStreamTimestamps(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::timestamp::v1::TimestampMessage>>(AsyncStreamTimestampsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::timestamp::v1::TimestampMessage>> PrepareAsyncStreamTimestamps(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::timestamp::v1::TimestampMessage>>(PrepareAsyncStreamTimestampsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get the current timestamp
      virtual void GetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest* request, ::timestamp::v1::GetCurrentTimestampResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest* request, ::timestamp::v1::GetCurrentTimestampResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream timestamps at regular intervals
      virtual void StreamTimestamps(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest* request, ::grpc::ClientReadReactor< ::timestamp::v1::TimestampMessage>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::timestamp::v1::GetCurrentTimestampResponse>* AsyncGetCurrentTimestampRaw(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::timestamp::v1::GetCurrentTimestampResponse>* PrepareAsyncGetCurrentTimestampRaw(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::timestamp::v1::TimestampMessage>* StreamTimestampsRaw(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::timestamp::v1::TimestampMessage>* AsyncStreamTimestampsRaw(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::timestamp::v1::TimestampMessage>* PrepareAsyncStreamTimestampsRaw(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::timestamp::v1::GetCurrentTimestampResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timestamp::v1::GetCurrentTimestampResponse>> AsyncGetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timestamp::v1::GetCurrentTimestampResponse>>(AsyncGetCurrentTimestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timestamp::v1::GetCurrentTimestampResponse>> PrepareAsyncGetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timestamp::v1::GetCurrentTimestampResponse>>(PrepareAsyncGetCurrentTimestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::timestamp::v1::TimestampMessage>> StreamTimestamps(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::timestamp::v1::TimestampMessage>>(StreamTimestampsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::timestamp::v1::TimestampMessage>> AsyncStreamTimestamps(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::timestamp::v1::TimestampMessage>>(AsyncStreamTimestampsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::timestamp::v1::TimestampMessage>> PrepareAsyncStreamTimestamps(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::timestamp::v1::TimestampMessage>>(PrepareAsyncStreamTimestampsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest* request, ::timestamp::v1::GetCurrentTimestampResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCurrentTimestamp(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest* request, ::timestamp::v1::GetCurrentTimestampResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamTimestamps(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest* request, ::grpc::ClientReadReactor< ::timestamp::v1::TimestampMessage>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::timestamp::v1::GetCurrentTimestampResponse>* AsyncGetCurrentTimestampRaw(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::timestamp::v1::GetCurrentTimestampResponse>* PrepareAsyncGetCurrentTimestampRaw(::grpc::ClientContext* context, const ::timestamp::v1::GetCurrentTimestampRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::timestamp::v1::TimestampMessage>* StreamTimestampsRaw(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request) override;
    ::grpc::ClientAsyncReader< ::timestamp::v1::TimestampMessage>* AsyncStreamTimestampsRaw(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::timestamp::v1::TimestampMessage>* PrepareAsyncStreamTimestampsRaw(::grpc::ClientContext* context, const ::timestamp::v1::StreamTimestampsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentTimestamp_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamTimestamps_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get the current timestamp
    virtual ::grpc::Status GetCurrentTimestamp(::grpc::ServerContext* context, const ::timestamp::v1::GetCurrentTimestampRequest* request, ::timestamp::v1::GetCurrentTimestampResponse* response);
    // Stream timestamps at regular intervals
    virtual ::grpc::Status StreamTimestamps(::grpc::ServerContext* context, const ::timestamp::v1::StreamTimestampsRequest* request, ::grpc::ServerWriter< ::timestamp::v1::TimestampMessage>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCurrentTimestamp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCurrentTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentTimestamp(::grpc::ServerContext* /*context*/, const ::timestamp::v1::GetCurrentTimestampRequest* /*request*/, ::timestamp::v1::GetCurrentTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentTimestamp(::grpc::ServerContext* context, ::timestamp::v1::GetCurrentTimestampRequest* request, ::grpc::ServerAsyncResponseWriter< ::timestamp::v1::GetCurrentTimestampResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamTimestamps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamTimestamps() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamTimestamps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTimestamps(::grpc::ServerContext* /*context*/, const ::timestamp::v1::StreamTimestampsRequest* /*request*/, ::grpc::ServerWriter< ::timestamp::v1::TimestampMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamTimestamps(::grpc::ServerContext* context, ::timestamp::v1::StreamTimestampsRequest* request, ::grpc::ServerAsyncWriter< ::timestamp::v1::TimestampMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCurrentTimestamp<WithAsyncMethod_StreamTimestamps<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetCurrentTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCurrentTimestamp() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::timestamp::v1::GetCurrentTimestampRequest, ::timestamp::v1::GetCurrentTimestampResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::timestamp::v1::GetCurrentTimestampRequest* request, ::timestamp::v1::GetCurrentTimestampResponse* response) { return this->GetCurrentTimestamp(context, request, response); }));}
    void SetMessageAllocatorFor_GetCurrentTimestamp(
        ::grpc::MessageAllocator< ::timestamp::v1::GetCurrentTimestampRequest, ::timestamp::v1::GetCurrentTimestampResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::timestamp::v1::GetCurrentTimestampRequest, ::timestamp::v1::GetCurrentTimestampResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCurrentTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentTimestamp(::grpc::ServerContext* /*context*/, const ::timestamp::v1::GetCurrentTimestampRequest* /*request*/, ::timestamp::v1::GetCurrentTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentTimestamp(
      ::grpc::CallbackServerContext* /*context*/, const ::timestamp::v1::GetCurrentTimestampRequest* /*request*/, ::timestamp::v1::GetCurrentTimestampResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamTimestamps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamTimestamps() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::timestamp::v1::StreamTimestampsRequest, ::timestamp::v1::TimestampMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::timestamp::v1::StreamTimestampsRequest* request) { return this->StreamTimestamps(context, request); }));
    }
    ~WithCallbackMethod_StreamTimestamps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTimestamps(::grpc::ServerContext* /*context*/, const ::timestamp::v1::StreamTimestampsRequest* /*request*/, ::grpc::ServerWriter< ::timestamp::v1::TimestampMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::timestamp::v1::TimestampMessage>* StreamTimestamps(
      ::grpc::CallbackServerContext* /*context*/, const ::timestamp::v1::StreamTimestampsRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetCurrentTimestamp<WithCallbackMethod_StreamTimestamps<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCurrentTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCurrentTimestamp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCurrentTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentTimestamp(::grpc::ServerContext* /*context*/, const ::timestamp::v1::GetCurrentTimestampRequest* /*request*/, ::timestamp::v1::GetCurrentTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamTimestamps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamTimestamps() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamTimestamps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTimestamps(::grpc::ServerContext* /*context*/, const ::timestamp::v1::StreamTimestampsRequest* /*request*/, ::grpc::ServerWriter< ::timestamp::v1::TimestampMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCurrentTimestamp() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCurrentTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentTimestamp(::grpc::ServerContext* /*context*/, const ::timestamp::v1::GetCurrentTimestampRequest* /*request*/, ::timestamp::v1::GetCurrentTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentTimestamp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamTimestamps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamTimestamps() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamTimestamps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTimestamps(::grpc::ServerContext* /*context*/, const ::timestamp::v1::StreamTimestampsRequest* /*request*/, ::grpc::ServerWriter< ::timestamp::v1::TimestampMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamTimestamps(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCurrentTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCurrentTimestamp() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCurrentTimestamp(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCurrentTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentTimestamp(::grpc::ServerContext* /*context*/, const ::timestamp::v1::GetCurrentTimestampRequest* /*request*/, ::timestamp::v1::GetCurrentTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentTimestamp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamTimestamps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamTimestamps() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamTimestamps(context, request); }));
    }
    ~WithRawCallbackMethod_StreamTimestamps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTimestamps(::grpc::ServerContext* /*context*/, const ::timestamp::v1::StreamTimestampsRequest* /*request*/, ::grpc::ServerWriter< ::timestamp::v1::TimestampMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamTimestamps(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCurrentTimestamp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::timestamp::v1::GetCurrentTimestampRequest, ::timestamp::v1::GetCurrentTimestampResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::timestamp::v1::GetCurrentTimestampRequest, ::timestamp::v1::GetCurrentTimestampResponse>* streamer) {
                       return this->StreamedGetCurrentTimestamp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCurrentTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentTimestamp(::grpc::ServerContext* /*context*/, const ::timestamp::v1::GetCurrentTimestampRequest* /*request*/, ::timestamp::v1::GetCurrentTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentTimestamp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::timestamp::v1::GetCurrentTimestampRequest,::timestamp::v1::GetCurrentTimestampResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCurrentTimestamp<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamTimestamps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamTimestamps() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::timestamp::v1::StreamTimestampsRequest, ::timestamp::v1::TimestampMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::timestamp::v1::StreamTimestampsRequest, ::timestamp::v1::TimestampMessage>* streamer) {
                       return this->StreamedStreamTimestamps(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamTimestamps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamTimestamps(::grpc::ServerContext* /*context*/, const ::timestamp::v1::StreamTimestampsRequest* /*request*/, ::grpc::ServerWriter< ::timestamp::v1::TimestampMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamTimestamps(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::timestamp::v1::StreamTimestampsRequest,::timestamp::v1::TimestampMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamTimestamps<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCurrentTimestamp<WithSplitStreamingMethod_StreamTimestamps<Service > > StreamedService;
};

}  // namespace v1
}  // namespace timestamp


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_timestamp_2eproto__INCLUDED
